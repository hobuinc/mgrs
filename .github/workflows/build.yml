name: Build

on:
  workflow_dispatch:
  pull_request:
    branches:
    - '*'
  push:
    branches:
    - '*'
  release:
    types:
      - published

jobs:
  black:
    name: black
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: '3.10'
    - name: Setup
      run: pip install black
    - name: Lint with black
      run: black --check --diff .
  flake8:
    name: flake8
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: '3.10'
    - name: Setup
      run: pip install flake8
    - name: Lint with flake8
      run: flake8
  isort:
    name: isort
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-python@v2
      with:
        python-version: '3.10'
    - name: Setup
      run: pip install isort[colors]
    - name: Lint with isort
      run: isort --check --diff .

  conda:
    name: Conda ${{ matrix.python-version }} - ${{ matrix.os }}

    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: ['ubuntu-latest', 'macos-latest', 'windows-latest']
        python-version: ['3.7', '3.8', '3.9', '3.10']

    steps:
    - uses: actions/checkout@v2
    - uses: conda-incubator/setup-miniconda@v2
      with:
        channels: conda-forge
        auto-update-conda: true
        python-version: ${{ matrix.python-version }}

    - name: Install
      shell: bash -l {0}
      run: |
        pip install -e .
    - name: Test with pytest
      shell: bash -l {0}
      run: |
        pip install pytest
        python -m pytest --doctest-modules tests

  wheels:
    name: Build wheel on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    env:
      CIBW_SKIP: pp* *-win32
      CIBW_TEST_REQUIRES: pytest
      CIBW_TEST_COMMAND: ""
      # we are copying the shared libraries ourselves so skip magical copy
      CIBW_REPAIR_WHEEL_COMMAND_MACOS: ""
      MACOSX_DEPLOYMENT_TARGET: 10.9
      CIBW_BUILD_VERBOSITY_MACOS: 3
      CIBW_TEST_SKIP: "*-macosx_arm64 *-macosx_universal2:arm64"
      CIBW_ARCHS_MACOS: "x86_64 arm64"
      CIBW_REPAIR_WHEEL_COMMAND_WINDOWS: ""
      CIBW_BEFORE_BUILD_LINUX: ""
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
    steps:
    - uses: actions/checkout@v1
    - uses: actions/setup-python@v2
      name: Install Python
      with:
        python-version: '3.10'
    - name: Install cibuildwheel
      run: |
        python -m pip install cibuildwheel==2.3.1
    - uses: ilammy/msvc-dev-cmd@v1
      if: startsWith(matrix.os, 'windows')
    - name: Build wheels
      run: |
        python3 -m cibuildwheel --output-dir wheelhouse
    - uses: actions/upload-artifact@v2
      with:
        name: ${{ matrix.os }}-whl
        path: wheelhouse/*.whl

  wheels_aarch64:
    name: Build wheel on aarch64 for ${{ matrix.python_tag }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
       python_tag: [ "cp37-*", "cp38-*", "cp39-*", "cp310-*"]
    env:
      CIBW_ARCHS_LINUX: aarch64
      CIBW_BUILD: ${{matrix.python_tag}}
      CIBW_TEST_REQUIRES: pytest numpy
      CIBW_TEST_COMMAND: "pytest -v {project}/tests"
      CIBW_BEFORE_BUILD_LINUX: ""

    steps:
    - uses: actions/checkout@v1
    - uses: actions/setup-python@v2
      name: Install Python
      with:
        python-version: '3.10'
    - name: Install cibuildwheel
      run: |
        python -m pip install cibuildwheel==2.3.1
    - uses: docker/setup-qemu-action@v1
      name: Set up QEMU
    - name: Build wheels
      run: |
        python -m cibuildwheel --output-dir wheelhouse
    - uses: actions/upload-artifact@v2
      with:
        name: aarch64-whl
        path: wheelhouse/*.whl



